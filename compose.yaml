version: "3"

networks:
  internal:

volumes:
  vol-postgres:
  vol-kafka:

# TODO
# kafka, postgres volumes

services:
# infra services
  # https://hub.docker.com/r/bitnami/kafka/
  kafka:
    image: bitnami/kafka:3.5
    networks:
    - internal
    volumes:
    - vol-kafka:/bitnami/kafka
    environment:
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka:9093
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
    # https://stackoverflow.com/a/78342248
    # healthcheck:
    #   test: test: kafka-topics.sh --list --bootstrap-server localhost:9092 || exit 1
    #   interval: 1s
    #   timeout: 60s
    #   retries: 60
  postgres:
    image: postgres:latest
    networks:
    - internal
    volumes:
    - vol-postgres:/var/lib/postgresql/data 
    environment:
      POSTGRES_USER: pg
      POSTGRES_PASSWORD: insecure
      POSTGRES_DB: dev
    # https://stackoverflow.com/a/72175755
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 6
  pgmigrate:
    image: ghcr.io/peterldowns/pgmigrate:latest
    command: pgmigrate migrate
    # restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    networks:
    - internal
    volumes:
    - ./migrations:/migrations
    environment:
      PGM_MIGRATIONS: /migrations
      PGM_DATABASE: postgres://pg:insecure@postgres:5432/dev
# services
  service-messagio:
    restart: unless-stopped
    ports:
    - 80:8080
    build:
      context: .
      dockerfile: ./golang-service.dockerfile
      args:
      - SERVICE=messagio
    networks:
    - internal
    environment:
      SERVICE_KAFKA_URL: kafka:9092
      SERVICE_POSTGRES_URL: postgres://pg:insecure@postgres:5432/dev
# staging
  # service-fake-load:
  #   restart: unless-stopped
  #   build:
  #     context: .
  #     dockerfile: ./golang-service.dockerfile
  #     args:
  #     - SERVICE=fake_load
  #   networks:
  #   - internal
  #   volumes:
  #   - ./words.txt:/app/words.txt
  #   labels:
  #     - "traefik.enable=false"
  #   environment:
  #     SERVICE_MESSAGE_URL: http://service-messages:8080/message